generator client {
    provider = "prisma-client-js"
    output   = "../app/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("AIPLANNER_POSTGRES_URL")
}

enum StatusCd {
    PENDING
    IN_PROGRESS
    COMPLETED
    CANCELLED
}

enum Role {
    USER
    ASSISTANT
}

model User {
    id                  Int                   @id @default(autoincrement())
    email               String                @unique
    name                String?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    password            String
    Tasks               Task[]
    Plan                Plan[]
    Conversation        Conversation[]
    AuthProviderAccount AuthProviderAccount[]
}

model AuthProviderAccount {
    id             String    @id @default(cuid())
    userId         Int
    provider       String
    providerUserId String
    accessToken    String?
    expiresAt      DateTime?

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerUserId])
}

model Plan {
    id             Int          @id @default(autoincrement())
    title          String
    description    String?
    status         StatusCd
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    dueDate        DateTime?
    priority       Int?
    userId         Int
    user           User         @relation(fields: [userId], references: [id])
    Tasks          Task[]
    conversationId Int          @unique
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    @@index([conversationId])
}

model Task {
    id             Int          @id @default(autoincrement())
    title          String
    description    String?
    status         StatusCd
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    dueDate        DateTime?
    priority       Int?
    userId         Int
    user           User         @relation(fields: [userId], references: [id])
    planId         Int?
    plan           Plan?        @relation(fields: [planId], references: [id])
    conversationId Int          @unique
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    @@index([conversationId])
    @@index([planId])
}

model Conversation {
    id        Int        @id @default(autoincrement())
    userId    Int
    user      User       @relation(fields: [userId], references: [id])
    sessionId String     @unique
    messages  Message[]
    planId    Int?       @unique
    plan      Plan?
    taskId    Int?       @unique
    task      Task?
    title     String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    AgentRun  AgentRun[]
}

model Message {
    id             Int          @id @default(autoincrement())
    conversationId Int
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    role           Role
    content        String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model AgentRun {
    id             String       @id @default(cuid())
    conversationId Int
    input          String
    rawOutput      String
    parsedType     String
    createdAt      DateTime     @default(now())
    Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}
